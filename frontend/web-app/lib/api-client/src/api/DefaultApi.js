/**
 * Main API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient'
import CloudEvent from '../model/CloudEvent'
import User from '../model/User'

/**
 * Default service.
 * @module api/DefaultApi
 * @version 0.1.0
 */
export default class DefaultApi {
  /**
   * Constructs a new DefaultApi.
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance
  }

  /**
   * Callback function to receive the result of the getUserById operation.
   * @callback module:api/DefaultApi~getUserByIdCallback
   * @param {String} error Error message, if any.
   * @param {module:model/User} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Retrieve user details
   * @param {Object} id The ID of the user to retrieve.
   * @param {module:api/DefaultApi~getUserByIdCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/User}
   */
  getUserById(id, callback) {
    let postBody = null
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling getUserById",
      )
    }

    let pathParams = {
      id: id,
    }
    let queryParams = {}
    let headerParams = {}
    let formParams = {}

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = User
    return this.apiClient.callApi(
      '/users/{id}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    )
  }

  /**
   * Callback function to receive the result of the listUsers operation.
   * @callback module:api/DefaultApi~listUsersCallback
   * @param {String} error Error message, if any.
   * @param {Object} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * List users
   * @param {module:api/DefaultApi~listUsersCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link Object}
   */
  listUsers(callback) {
    let postBody = null

    let pathParams = {}
    let queryParams = {}
    let headerParams = {}
    let formParams = {}

    let authNames = []
    let contentTypes = []
    let accepts = ['application/json']
    let returnType = Object
    return this.apiClient.callApi(
      '/users',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    )
  }

  /**
   * Callback function to receive the result of the logEvent operation.
   * @callback module:api/DefaultApi~logEventCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Log an event
   * @param {module:model/CloudEvent} cloudEvent
   * @param {module:api/DefaultApi~logEventCallback} callback The callback function, accepting three arguments: error, data, response
   */
  logEvent(cloudEvent, callback) {
    let postBody = cloudEvent
    // verify the required parameter 'cloudEvent' is set
    if (cloudEvent === undefined || cloudEvent === null) {
      throw new Error(
        "Missing the required parameter 'cloudEvent' when calling logEvent",
      )
    }

    let pathParams = {}
    let queryParams = {}
    let headerParams = {}
    let formParams = {}

    let authNames = []
    let contentTypes = ['application/cloudevents+json']
    let accepts = []
    let returnType = null
    return this.apiClient.callApi(
      '/events',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    )
  }
}
